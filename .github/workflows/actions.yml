name: CI/CD - Symfony x Yarn x MySQL
on:
  push:
    branches:
      - develop
      - master
permissions: write-all
jobs:
  prod:
    name: PROD - Symfony x Yarn x MySQL
    # https://hub.docker.com/_/ubuntu/
    runs-on: ubuntu-latest
    env:
      db_user: root
      db_password: wideconnect
      db_name: wideconnect
      db_host: 127.0.0.1
      db_type: mysql
      resource: image_build/php_service/src
      makefile: image_build
    services:
      # https://hub.docker.com/_/mysql
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.db_password }}
          MYSQL_PASSWORD: ${{ env.db_password }}
          MYSQL_DATABASE: ${{ env.db_name }}
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      # —— Build Docker Image 🐳 ————————————————————————————————————————————————————————
      - name: Clone Builder config
        run: git clone https://github.com/MickaelLivecampus/docker-php .
      
      # —— Setup GitBub Repository 🐙 —————————————————————————————————————————————
      - name: Git clone
        run: git clone https://github.com/Factors25/wideconnect.git ${{ env.resource }}
      
      # —— Setup PHP 💻 —————————————————————————————————————————————
      # https://github.com/shivammathur/setup-php (community)
      - name: Setup PHP, extensions and composer with shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, mbstring
        env:
          update: true
      
      - name: Check PHP Version
        run: php -v
      
      # —— Setup Composer 🧙‍️ —————————————————————————————————————————————————————————
      - name: Validate composer.json and composer.lock
        run: composer validate
        working-directory: ${{ env.resource }}
      
      # https://github.com/actions/cache
      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: ${{ env.resource }}/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-
      
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        working-directory: ${{ env.resource }}
      
      # —— Setup Yarn 🐱 ————————————————————————————————————————————————————————————
      # https://github.com/actions/setup-node
      - name: NodeJS install
        uses: actions/setup-node@v4
        with:
          node-version: 18.12.0
      
      - name: Yarn install
        run: yarn install
        working-directory: ${{ env.resource }}
      
      - name: Yarn build
        run: yarn run encore production
        working-directory: ${{ env.resource }}
      
      # —— Setup Symfony 🎵 —————————————————————————————————————————————
      # https://symfony.com/download (official)
      - name: Symfony installation
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/symfony/stable/setup.deb.sh' | sudo -E bash
          sudo apt install symfony-cli
      
      - name: Check Symfony requirements
        run: symfony check:requirements
        working-directory: ${{ env.resource }}
      
      - name: Check Symfony security
        run: symfony check:security
        working-directory: ${{ env.resource }}
      
      - name: Check the Symfony console
        run: php bin/console about
        working-directory: ${{ env.resource }}
      
      # —— Setup MySQL ✨ ——————————————————————————————————————————————————————————
      - name: Create and setup database
        run: php bin/console d:m:m --env=prod --no-interaction
        env:
          DATABASE_URL: ${{ env.db_type }}://${{ env.db_user }}:${{ env.db_password }}@${{ env.db_host }}:${{ job.services.mysql.ports['3306'] }}/${{ env.db_name }}
        working-directory: ${{ env.resource }}
      
      - name: Dump to prod
        run: composer dump-env prod
        working-directory: ${{ env.resource }}
      
      # —— Setup Script 🔧 ——————————————————————————————————————————————————————————
      - name: Debug statement code
        run: php bin/console wideconnect:debug
        working-directory: ${{ env.resource }}
      
      # —— Setup Unit test ✅ ————————————————————————————————————————————————————————
      - name: Unit tests
        run: |
          php bin/console d:d:c --env=test
          php bin/console d:m:m --env=test --no-interaction
          php bin/console d:f:l --env=test --no-interaction
          php bin/phpunit
        env:
          DATABASE_URL: ${{ env.db_type }}://${{ env.db_user }}:${{ env.db_password }}@${{ env.db_host }}:${{ job.services.mysql.ports['3306'] }}/${{ env.db_name }}
        working-directory: ${{ env.resource }}

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and push
#        run: make build-and-push-from-ci
#        working-directory: ${{ env.makefile }}
